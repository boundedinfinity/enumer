
//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package enum_internal

import (
	"database/sql/driver"
	"fmt"
	
	"github.com/boundedinfinity/enumer"
)

type MyString string

// /////////////////////////////////////////////////////////////////
//  MyString Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t MyString) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  MyString JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MyString) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *MyString) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, MyStrings.Parse)
}

// /////////////////////////////////////////////////////////////////
//  MyString YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MyString) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *MyString) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, MyStrings.Parse)
}

// /////////////////////////////////////////////////////////////////
//  MyString SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t MyString) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *MyString) Scan(value interface{}) error {
	return enumer.Scan(value, t, MyStrings.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type myStrings struct {
    MyString1  MyString
    MyString2  MyString
    MyString3  MyString
    Values []MyString
    Err error
}

var MyStrings = myStrings{
    MyString1: MyString("my-string-1"),
    MyString2: MyString("my-string-2"),
    MyString3: MyString("MyString3"),
	Err: fmt.Errorf("invalid MyString"),
}

func init() {
	MyStrings.Values = []MyString{
		MyStrings.MyString1,
		MyStrings.MyString2,
		MyStrings.MyString3,
	}
}

func (t myStrings) newErr(a any, values ...MyString) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		MyStrings.Err, 
		a, 
		enumer.Join(values, ", "),
	)
}

func (t myStrings) ParseFrom(v string, values ...MyString) (MyString, error) {
	var found MyString
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, MyString](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t myStrings) Parse(v string) (MyString, error) {
	return t.ParseFrom(v, MyStrings.Values...)
}

func (t myStrings) IsFrom(v string, values ...MyString) bool {
	for _, value := range values {
		if enumer.IsEq[string, MyString](v)(value) {
			return true
		}
	}
	return false
}

func (t myStrings) Is(v string) bool {
	return t.IsFrom(v, MyStrings.Values...)
}
