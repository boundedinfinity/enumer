package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/build"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
)

type data struct {
	Type      string
	Name      string
	Package   string
	Directory string
	Filename  string
}

func main() {
	var args data
	flag.StringVar(&args.Type, "type", "", "The type used for the optional being generated")
	flag.StringVar(&args.Name, "name", "", "The name used for the optional being generated. This should start with a capital letter so that it is exported.")
	flag.StringVar(&args.Package, "package", "", "The package used for the optinoal being generated.")
	flag.StringVar(&args.Directory, "directory", "", "The output path used for the optinoal being generated.")
	flag.StringVar(&args.Filename, "filename", "", "The output path used for the optinoal being generated.")
	flag.Parse()

	if args.Type == "" {
		log.Fatal("-type cannot be empty")
		os.Exit(1)
	}

	if args.Package == "" {
		pkg, err := build.Default.ImportDir(".", 0)

		if err != nil {
			log.Fatal(err)
			os.Exit(1)
		}

		args.Package = pkg.Name
	}

	if args.Directory == "" {
		args.Directory = "."
	}

	if args.Name == "" {
		args.Name = strings.Title(args.Type)
	}

	if args.Filename == "" {
		args.Filename = fmt.Sprintf("%v_opt.gen.go", strings.ToLower(args.Name))
	}

	t, err := template.New(args.Filename).Parse(tmplText)

	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	var b bytes.Buffer

	if err := t.Execute(&b, args); err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	f, err := format.Source(b.Bytes())

	if err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

	p := path.Join(args.Directory, args.Filename)

	if err := ioutil.WriteFile(p, f, 0644); err != nil {
		log.Fatal(err)
		os.Exit(1)
	}

}

var tmplText = `
////////////////////////////////////////////////////////////////////////
// Generated by boundedenumeration
////////////////////////////////////////////////////////////////////////

package {{.Package}}

import "encoding/json"

func New{{.Name}}Enum(v *{{.Type}}) {{.Name}}Enum {
	return {{.Name}}Enum {
		v: v,
	}
}

type {{.Name}}Enum struct {
	v *{{.Type}}
}

func (t {{.Name}}Enum) GetOrElse(v {{.Type}}) {{.Type}} {
	if t.IsDefined() {
		return t.Get()
	}

	return v
}

func (t {{.Name}}Enum) Get() {{.Type}} {
	var v {{.Type}}

	if t.IsDefined() {
		v = *t.v
	}

	return v
}

func (t {{.Name}}Enum) IsDefined() bool {
var defined bool

if t.v != nil {
		defined = true
}

	return defined
}

func (t {{.Name}}Enum) IsEmpty() bool {
	return !t.IsDefined()
}

func (t {{.Name}}Enum) MarshalJSON() ([]byte, error) {
	if t.IsDefined() {
		return json.Marshal(*t.v)
	}

	return json.Marshal(nil)
}

func (t *{{.Name}}Enum) UnmarshalJSON(data []byte) error {
	var v {{.Type}}

	if len(data) > 0 {
		if err := json.Unmarshal(data, &v); err != nil {
			return err
		}

		t.v = &v
	}

	return nil
}
`
