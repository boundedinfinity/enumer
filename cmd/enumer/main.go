package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"go/format"
	"os"
	"path"
	"strings"
	"text/template"

	"github.com/boundedinfinity/asciibox"
	"github.com/boundedinfinity/go-commoner/idiomatic/caser"
	"github.com/boundedinfinity/go-commoner/idiomatic/extentioner"
	"github.com/boundedinfinity/go-commoner/idiomatic/pather"
	"github.com/boundedinfinity/go-commoner/idiomatic/stringer"
	"github.com/gertd/go-pluralize"
	"gopkg.in/yaml.v2"
)

const (
	FilePermissions = 0755
)

var (
	Header = []string{
		"===== DO NOT EDIT =====",
		"Manual changes will be overwritten.",
		"Generated by github.com/boundedinfinity/enumer",
	}
)

type enumData struct {
	Type        string      `json:"type" yaml:"type"`
	Struct      string      `json:"struct" yaml:"struct"`
	Package     string      `json:"package" yaml:"package"`
	InputPath   string      `json:"input-path" yaml:"input-path"`
	OutputPath  string      `json:"output-path" yaml:"output-path"`
	Desc        string      `json:"desc" yaml:"desc"`
	Header      string      `json:"header" yaml:"header"`
	HeaderFrom  string      `json:"header-from" yaml:"header-from"`
	HeaderLines []string    `json:"header-lines" yaml:"header-lines"`
	SkipFormat  bool        `json:"skip-format" yaml:"skip-format"`
	Debug       bool        `json:"debug" yaml:"debug"`
	Values      []enumvalue `json:"values" yaml:"values"`
}

type enumvalue struct {
	Name       string `json:"name" yaml:"name"`
	Serialized string `json:"serialized" yaml:"serialized"`
}

type argsData struct {
	InputPath  string
	SkipFormat bool
	Debug      bool
}

func handleErr(err error) {
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
}

func main() {
	var enum enumData

	if err := processArgs(&enum); err != nil {
		handleErr(err)
	}

	bs, err := processTemplate(enum)

	if err != nil {
		handleErr(err)
	}

	if err := processWrite(enum, bs); err != nil {
		handleErr(err)
	}
}

func processArgs(enum *enumData) error {
	var args argsData

	flag.StringVar(&args.InputPath, "config", "", "The input file used for the enum being generated.")
	flag.BoolVar(&args.SkipFormat, "skip-format", false, "Skip source formatting.")
	flag.BoolVar(&args.Debug, "debug", false, "Enabled debugging.")
	flag.Parse()

	if args.InputPath == "" {
		return errors.New("Missing config path.  The input file used for the enum being generated.")
	}

	if !stringer.EndsWith(args.InputPath, ".enum.yaml") {
		return fmt.Errorf("%v must be a .enum.yaml file\n", args.InputPath)
	}

	if _, err := os.Stat(args.InputPath); err != nil {
		return fmt.Errorf("Invalid config path %v: %w", args.InputPath, err)
	}

	if bs, err := os.ReadFile(args.InputPath); err == nil {
		if err := yaml.Unmarshal(bs, &enum); err != nil {
			return fmt.Errorf("Can't parse config path %v : %w.", args.InputPath, err)
		}
	} else {
		return fmt.Errorf("Can't load config path %v : %w.", args.InputPath, err)
	}

	if args.SkipFormat {
		enum.SkipFormat = args.SkipFormat
	}

	if args.Debug {
		enum.Debug = args.Debug
	}

	enum.InputPath = args.InputPath

	if enum.OutputPath == "" {
		enum.OutputPath = extentioner.Swap(enum.InputPath, ".yaml", ".go")
	}

	if enum.Package == "" {
		enum.Package = enum.OutputPath
		enum.Package = pather.Dir(enum.Package)
		enum.Package = pather.Base(enum.Package)
		enum.Package = stringer.ReplaceInList(enum.Package, []string{"-", " "}, "_")
	}

	if enum.Type == "" {
		enum.Type = enum.OutputPath
		enum.Type = pather.Base(enum.Type)
		enum.Type = extentioner.Strip(enum.Type)
		enum.Type = extentioner.Strip(enum.Type)
		enum.Type = stringer.ReplaceInList(enum.Type, []string{"-"}, " ")
		enum.Type = caser.PhraseToPascal(enum.Type)
	}

	if enum.Struct == "" {
		enum.Struct = enum.Type
		enum.Struct = pluralize.NewClient().Plural(enum.Struct)
	}

	for i := 0; i < len(enum.Values); i++ {
		value := enum.Values[i]

		if value.Name == "" {
			return fmt.Errorf("Invalid values[%v] name", i)
		}

		if value.Serialized == "" {
			value.Serialized = value.Name
		}

		enum.Values[i] = value
	}

	if enum.Header == "" && enum.HeaderFrom == "" {
		enum.HeaderLines = Header
	}

	if enum.Header != "" {
		enum.HeaderLines = stringer.Split(enum.Header, "\n")
	}

	if enum.HeaderFrom != "" {
		if _, err := os.Stat(enum.HeaderFrom); err != nil {
			return fmt.Errorf("Invalid header from path %v: %w", enum.HeaderFrom, err)
		}

		if bs, err := os.ReadFile(args.InputPath); err != nil {
			return fmt.Errorf("Can't read header from path %v: %w", enum.HeaderFrom, err)
		} else {
			header := string(bs)
			enum.HeaderLines = stringer.Split(header, "\n")
		}
	}

	enum.Header = asciibox.Box(
		enum.HeaderLines,
		asciibox.BoxOptions{Alignment: asciibox.Alignment_Left},
	)

	return nil
}

func processWrite(enum enumData, bs []byte) error {
	dir := path.Dir(enum.OutputPath)
	err := os.MkdirAll(dir, FilePermissions)

	if err != nil {
		return err
	}

	if err := os.WriteFile(enum.OutputPath, bs, FilePermissions); err != nil {
		return err
	}

	return nil
}

func processTemplate(enum enumData) ([]byte, error) {
	funcs := template.FuncMap{
		"title": func(s string) string {
			return strings.Title(s)
		},
		"lower": func(s string) string {
			return strings.ToLower(s)
		},
		"lowerFirst": func(s string) string {
			return stringer.ToLowerFirst(s)
		},
	}

	filename := path.Base(enum.OutputPath)
	t, err := template.New(filename).Funcs(funcs).Parse(standaloneTmpl)

	if err != nil {
		return []byte{}, nil
	}

	var b bytes.Buffer

	if err := t.Execute(&b, enum); err != nil {
		return []byte{}, err
	}

	if enum.SkipFormat {
		return b.Bytes(), nil
	} else {
		return format.Source(b.Bytes())
	}
}

var standaloneTmpl = `
{{ .Header }}

package {{ .Package }}

import (
	"database/sql/driver"
	"fmt"
	
	"github.com/boundedinfinity/enumer"
)

{{- $typeName := .Type }}
{{- $structName := .Struct }}

type {{ $typeName }} string

// /////////////////////////////////////////////////////////////////
//  {{ $typeName }} Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t {{ $typeName }}) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  {{ $typeName }} JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t {{ $typeName }}) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *{{ $typeName }}) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, {{ title $structName }}.Parse)
}

// /////////////////////////////////////////////////////////////////
//  {{ $typeName }} YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t {{ $typeName }}) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *{{ $typeName }}) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, {{ title $structName }}.Parse)
}

// /////////////////////////////////////////////////////////////////
//  {{ $typeName }} SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t {{ $typeName }}) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *{{ $typeName }}) Scan(value interface{}) error {
	return enumer.Scan(value, t, {{ title $structName }}.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type {{ lowerFirst $structName }} struct {
{{- range $field := .Values }}
    {{ $field.Name }}  {{ $typeName -}}
{{- end }}
    Values []{{ $typeName }}
    Err error
}

var {{ $structName }} = {{ lowerFirst $structName }}{	
{{- range $field := .Values }}
    {{ $field.Name }}: {{ $typeName -}}("{{- $field.Serialized -}}"),
{{- end }}
	Err: fmt.Errorf("invalid {{ $typeName }}"),
}

func init() {
	{{ title $structName }}.Values = []{{ $typeName -}} {
	{{- range $field := .Values }}
		{{ title $structName }}.{{ $field.Name }},
	{{- end }}
	}
}

func (t {{ lowerFirst $structName }}) newErr(a any, values ...{{ $typeName }}) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		{{ title $structName }}.Err, 
		a, 
		enumer.Join(values, ", "),
	)
}

func (t {{ lowerFirst $structName }}) ParseFrom(v string, values ...{{ $typeName }}) ({{ $typeName }}, error) {
	var found {{ $typeName }}
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, {{ $typeName }}](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t {{ lowerFirst $structName }}) Parse(v string) ({{ $typeName }}, error) {
	return t.ParseFrom(v, {{ title $structName }}.Values...)
}

func (t {{ lowerFirst $structName }}) IsFrom(v string, values ...{{ $typeName }}) bool {
	for _, value := range values {
		if enumer.IsEq[string, {{ $typeName }}](v)(value) {
			return true
		}
	}
	return false
}

func (t {{ lowerFirst $structName }}) Is(v string) bool {
	return t.IsFrom(v, {{ title $structName }}.Values...)
}
`
